<?xml version="1.0" encoding="UTF-8"?>
<!-- 
scan:
当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:
设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:
当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
例如：
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<contextName>xa_redis</contextName>
	<!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径-->  
    <property name="path" value="./logs/"></property>
    <!-- 获取当前时间 -->
    <timestamp key="time" datePattern="yyyyMMdd"/> 
    
       <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />
    <!-- Console 输出设置 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>
    
    
    <!-- 非彩色日志输出 -->
    <!-- 配置输出 -->
    <!-- 控制台输出 -->
<!--     <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    	<encoder> 
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern> 
        </encoder>
    </appender> -->
    
    <!-- 滚动文件输出，当文件满足某条件时，备份日志和重新生成日志 -->
    <appender name="exception" class="ch.qos.logback.core.rolling.RollingFileAppender">   
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">   
			<fileNamePattern>${path}\exception.%d{yyyy-MM-dd}.log</fileNamePattern>   
			<maxHistory>30</maxHistory>    
		</rollingPolicy>   
		<encoder>   
			<pattern>%d{HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   
		</encoder>   
		<filter class="ch.qos.logback.classic.filter.LevelFilter">  
            <level>ERROR</level>  
            <onMatch>ACCEPT</onMatch>  
            <onMismatch>DENY</onMismatch>  
        </filter>  
	</appender>  
	
	<!-- 滚动文件输出,当文件满足某条件时，备份日志和重新生成日志 -->
	<appender name="code" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">   
			<fileNamePattern>${path}\code_info.%d{yyyy-MM-dd}.log</fileNamePattern>
			<maxHistory>30</maxHistory>    
		</rollingPolicy>   
		<encoder>   
			<pattern>%d{HH:mm:ss.SSS} %-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   
		</encoder>   
	</appender>  
	
	<!-- 根据logger -->
    <root level="INFO">
        <appender-ref ref="code"/>
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="exception"/>
    </root>
</configuration>